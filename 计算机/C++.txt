1.对象生命周期结束，被销毁时会调用析构函数；
2.delete指向对象的指针时，或delete指向对象的基类类型指针，而其基类虚构函数是虚函数时；
3.对象i是对象o的成员，o的析构函数被调用时，对象i的析构函数也被调用
4.构造函数是先调用基类的构造函数，在调用派生类的构造函数
5 C和C++不能重载的运算符sizeof 运算符  :: 作用域运算符 ?:条件运算符 . 直接成员运算符  *指针运算符
6 static的作用定义静态局部变量，定义静态外部全局变量，声明静态外部函数
7 浅拷贝和深拷贝和赋值操作，A a,A b,a=b;赋值操作，A a; A b=a;浅拷贝操作调用拷贝构造函数； A a；A b;a=b；深拷贝调用重载的复制运算符
8 无符号数和有符号数相加，都转换为无符号数
9 虚继承时，类不会共享虚基类指针，也不会共享虚表指针
10 0开头代表8进制数，0x开头代表16进制数
11 转义序列有\n \t \a \v \b \" \\ \? \' \r \f 引用必须在定义时被初始化，只能引用到对象,引用不是对象,const对象必须被初始化，常量表达式的值在编译就得到计算 const int &i=0;合法 
12 函数fopen r+以可读写方式打开文件，该文件必须存在（只是覆盖不清空） w打开只写文件（原文件内容清空），若不存在会创建，w+打开可读写文件，若文件不存在则创建 a以附加方式打开只写文件，不存在则创建（原文件保留），a+ 以附加方式打开可读写文件，没有则创建
13 Struct和Class的唯一区别在于默认的访问权限，Struct为Public而Class为Private
14 只有通过指针和引用调用虚函数时，才会在运行期解析该调用，否则都是在编译期
15 memcpy函数实现
16 浅拷贝相当于生成对象的引用，深拷贝全新开辟空间，重新生成变量
17 函数指针的一般定义形式为 数据类型（*指针变量名）（参数表）
18 priority_queue<int，std::vector<int>,std::less<int>>模板有 3 个参数(大顶堆)，std::greater<int>（小顶堆）
其中两个有默认的参数；第一个参数是存储对象的类型，第二个参数是存储元素的底层容器，第三个参数是函数对象，
它定义了一个用来决定元素顺序的断言。
19 面向对象的六大基本原则：单一职责、开放封闭、里氏替换原则、依赖倒置、合成聚合和复用、接口隔离。
20 指针和引用的区别： 指针是变量的地址、引用是变量的别名；引用必须初始化，定义后不可变，切引用对象必须存在；引用不能用const；引用有类型检查，是类型安全的。
21 extern关键字的作用(不能修饰static变量)：标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义 extern "C"告诉编译器函数名和参数类型连在一起，按照C方法进行编译
22 static作用（具有文件作用域）：1 修饰局部变量 2 修饰全局变量 3 修饰函数，该函数定义必须在同一个文件，只在该文件可见4 修饰类的成员变量 5 修饰类的成员函数 
23 const作用:1 修饰变量该变量不改被修改 2 指针常量 const int *p 常量指针 int *const p;3 将函数参数传递为变量表明不更改;
4 将函数返回值声明为const，不能作为左值避免链式赋值 5将成员函数写为const不能更改成员变量6 const用于函数重载 
24 C++多态静态多态(函数重载)动态多态(虚函数)编译器为每一个有虚函数的class维护一个虚函数表，每个对象的首地址为虚函数表的指针，同一个类的不同对象指向同一个虚函数表
25 纯虚函数virtual F()=0;在基类定义纯虚函数，派生类一定要重写;基类的析构函数必须声明为虚函数，否则派生类析构时会部分析构，容易引起异常；虚函数是有代价的每个对象都多了一个指向虚函数的指针，只有需要多态时才定义
26 析构函数不能抛出异常：1析构函数抛出异常会打断正常析构流程，导致资源未能完全释放 2当发生异常C++会调用类的析构函数，如果析构中抛出异常会有未定义的行为
27 构造函数和析构函数中不能调用虚函数；有继承关系的类，构造函数会先初始化基类的数据初始化派生类，如果派生类调用还是会先调用基类的构造函数
析构函数调用 对象析构时会先调用派生类的析构函数，可能会在基类中析构已经析构的派生类成员
28 智能指针实现；构造函数中计数初始化1，拷贝构造函数中计数+1，赋值运算符左边的计数-1，右边的计数加1，析构函数中引用计数-1，赋值运算符和析构函数中如果计数为0则调用delete 删除对象并赋值为0
29 必须直接初始化unique_ptr独占所有权，不能赋值(可通过std::move赋值)；shared_ptr可以共享，通过计数来判断；weak_ptr 是一种不控制对象生命周期的智能指针, 它指向一个 shared_ptr 管理的对象. 进行该对象的内存管理的是那个强引用的 shared_ptr. weak_ptr只是提供了对管理对象的一个访问手段。
weak_ptr 它只可以从一个 shared_ptr 或另一个 weak_ptr 对象构造, 它的构造和析构不会引起引用记数的增加或减少
weak_ptr是用来解决shared_ptr相互引用时的死锁问题,如果说两个shared_ptr相互引用,那么这两个指针的引用计数永远不可能下降为0,资源永远不会释放。
30 所有名字的变量都是左值，可以取地址的都是左值，右值是临时对象；移动构造是为了避免重复构造对象底层的资源，而是通过移交所有权的方式构造，移交完后不应该访问移交过的元素
31 std::move能无条件把左值转换为右值；完美转发为了让参数类型一直传递，传递左值就调用左值，右值就调用右值；std::forward<T>
32 非常量右值引用只能绑定到非常量右值，不能绑定到非常量左值、常量左值和常量右值 int &&A=10；如果允许绑定到非常量左值，则可能会错误地窃取一个持久对象的数据，而这是非常危险的；如果允许绑定到常量左值和常量右值，则非常量右值引用可以用于修改常量左值和常量右值，这明显违反了其常量的含义。
33 常量右值引用可以绑定到非常量右值和常量右值，不能绑定到非常量左值和常量左值（理由同上）。
34 内存对齐原则： 对于结构的各个成员，第一个成员位于偏移为0的位置，以后每个数据成员的偏移量必须是min(#pragma pack()指定的数，这个数据成员的自身长度) 的倍数。
在数据成员完成各自对齐之后，结构(或联合)本身也要进行对齐，对齐将按照#pragma pack指定的数值和结构(或联合)最大数据成员长度中，比较小的那个进行
35 内存对齐的主要作用是：1、平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。
2、性能原因：经过内存对齐后，CPU的内存访问速度大大提升。CPU读取内存是一块一块的读取
36 函数调用原理:执行到函数调用指令时，程序将在函数调用后立即存储该指令的内存地址，并将函数参数复制到堆栈（为此保留的内存块），跳到标记函数起点的内存单元，执行函数代码（也许还需将返回值放入寄存器中），然后跳回到地址被保存的指令处。来回跳跃并记录跳跃位置意味着以前使用函数时，需要一定的开销。
37 内联函数：在编译期将函数代码直接替换，避免函数调用；
38  (1) 在预编译时期，宏定义在调用处执行字符串的原样替换。在编译时期，内联函数在调用处展开，同时进行参数类型检查
(2) 内联函数首先是函数，可以像调用普通函数一样调用内联函数。而宏定义往往需要添加很多括号防止歧义，编写更加复杂。
(3) 内联函数可以作为某个类的成员函数，这样可以使用类的保护成员和私有成员。而当一个表达式涉及到类保护成员或私有成员时，宏就不能实现了(无法将this指针放在合适位置)。
39 在类中对基类成员和内嵌对象成员的初始化必须在成员初始化列表中进行，另有const成员必须在初始化列表中进行
40 内存泄漏的检测方案：①在windows平台下通过CRT的库函数进行检测②在可能泄漏的块前后使用内存快照，比较前后的状态进行对比③Linux下通过工具valgrind检测
41 fork()调用底层：①检测进程数量，如果超过则返回②陷入进程，申请资源，复制父进程空间③父子进程共享内存空间，并标记只读，当一个进程修改，触发时进行修改④父子进程独立
42 Overload（重载）允许在同一作用域中出现多个同名不同参的函数；Override（覆盖）在派生类中重新定义实现基类中的虚函数不同作用域（分别位于派生类与基类）；Overwrite：（重写）指派生类的函数屏蔽与其同名的基类函数，发生在不同类域（派生类与基类之间），派生类与基类函数同名不同参数，基类的同名函数不是虚函数
43 emplace_back和push_back EM引入了右值引用  转移构造函数后  push_back()右值时就会调用构造函数和转移构造函数  如果可以在插入的时候直接构造  就只需要构造一次即可  这就是c++11 新加的emplace_back
44 原子操作是无锁编程的基石，原子操作是不可分隔的操作，一般通过CAS(Compare and 
Swap)操作实现，CAS操作需要输入两个数值，一个旧值（期望操作前的值）和一个新值，在操作期间先比较下旧值有没有发生变化，如果没有发生变化，才交换成新值，发生了变化则不交换
45 https://www.jianshu.com/p/5218c451c2ca  背包问题
46 
47 