1 https://blog.csdn.net/v_JULY_v/article/details/6279498  十个大数问题，一般使用hash算法分割，使用hash_map存储然后再多路归并
2 hashtable以质数来设计表格大小，预先计算好了28个质数，大约都是两倍的关系递增，查询28个质数中，“最接近且大于元素数目”的数字作为vector的长度，如果需要重新分配，则分配下一个质数长度的vector。Bucket所维护的linked list不采用STL的list或者slist(直接指针操作)，而至于bucket则使用vector来完成。
3 hash冲突避免算法：①开放定址法②拉链法；优点：拉链法无冲突现像查找快；适合于不定长度；开放定址装填因子低浪费空间；删除节点比较简单；缺点：当总数较少，因为需要保存头指针浪费空间；
4 STLhash扩容：①创建新桶，大小更接近旧桶的2倍质数②通过指针转换，将原来的数插入新桶③通过swap交换，销毁新桶
5 红黑树是每个节点都带有颜色属性的二叉查找树，颜色或红色或黑色。在二叉查找树强制一般要求以外，
对于任何有效的红黑树我们增加了如下的额外要求:从根到叶子的最长的可能路径不多于最短的可能路径的两倍长
性质1 节点是红色或黑色。性质2 根节点是黑色。性质3 每个叶节点是黑色的。
性质4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
性质5 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。
6 在AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。
AVL是严格的平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；
红黑树是用非严格的平衡来换取增删节点时候旋转次数的降低开销，去掉颜色后也能不是平衡的AVL树；
7 B树：二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于走右结点；
B-树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点； 所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；
B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；
B*树：在B+树基础上，为非叶子结点（增加兄弟节点）也增加链表指针，将结点的最低利用率从1/2提高到2/3；